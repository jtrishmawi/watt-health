{"version":3,"sources":["components/NavBar/Brand.js","components/NavBar/BurgerMenu.js","components/NavBar/CollapseMenu.js","components/NavBar/index.js","styles/Global.js","App.js","serviceWorker.js","index.js"],"names":["Image","styled","img","Brand","Tabbable","as","src","alt","Wrapper","div","BurgerMenu","handleNavbar","navbarState","onClick","className","CollapseWrapper","animated","NavLinks","ul","CollapseMenu","open","useSpring","style","transform","interpolate","range","output","openValue","href","NavBar","nav","FlexContainer","BurgerWrapper","Navbar","useState","isOpen","setIsOpen","barAnimation","from","linkAnimation","opacity","to","delay","config","wobbly","state","GlobalStyles","createGlobalStyle","App","Global","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAIA,IAAMA,EAAQC,IAAOC,IAAV,KAWIC,EAND,WACZ,OACE,kBAACC,EAAA,EAAD,CAAUC,GAAIL,EAAOM,IAAI,WAAWC,IAAI,iB,y9BCP5C,IAAMC,EAAUP,IAAOQ,IAAV,KAiEEC,EAZI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAClC,OACE,kBAACR,EAAA,EAAD,CAAUC,GAAIG,EAASK,QAASF,GAC9B,yBAAKG,UAAWF,EAAc,OAAS,IACrC,sCACA,sCACA,yC,ilBCzDR,IAAMG,EAAkBd,YAAOe,IAASP,IAAhBR,CAAH,KAQfgB,EAAWhB,IAAOiB,GAAV,KA+CCC,EAxBM,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,YACdQ,EAASC,YAAU,CAAED,KAAMR,EAAc,EAAI,IAA7CQ,KAER,OAAoB,IAAhBR,EAEA,kBAACG,EAAD,CAAiBO,MAAO,CACtBC,UAAWH,EAAKI,YAAY,CAC1BC,MAAO,CAAC,EAAG,GAAK,GAAK,GACrBC,OAAQ,CAAC,GAAI,GAAI,GAAI,OACpBF,aAAY,SAAAG,GAAS,+BAAsBA,EAAtB,cAGxB,kBAACV,EAAD,KACE,kBAACb,EAAA,EAAD,CAAUC,GAAG,MAAK,uBAAGuB,KAAK,KAAR,WAClB,kBAACxB,EAAA,EAAD,CAAUC,GAAG,MAAK,uBAAGuB,KAAK,KAAR,aAClB,kBAACxB,EAAA,EAAD,CAAUC,GAAG,MAAK,uBAAGuB,KAAK,KAAR,cAClB,kBAACxB,EAAA,EAAD,CAAUC,GAAG,MAAK,uBAAGuB,KAAK,KAAR,iCAKnB,M,mjCChDT,IAAMC,EAAS5B,YAAOe,IAASc,IAAhB7B,CAAH,KAUN8B,EAAgB9B,IAAOQ,IAAV,KASbQ,EAAWhB,YAAOe,IAASE,GAAhBjB,CAAH,KA0BR+B,EAAgB/B,IAAOQ,IAAV,KAiDJwB,EAzCA,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACZC,EADY,KACJC,EADI,KAEbC,EAAehB,YAAU,CAC7BiB,KAAM,CAAEf,UAAW,6BACnBA,UAAW,yBAGPgB,EAAgBlB,YAAU,CAC9BiB,KAAM,CAAEf,UAAW,0BAA2BiB,QAAS,GACvDC,GAAI,CAAElB,UAAW,uBAAwBiB,QAAS,GAClDE,MAAO,IACPC,OAAQA,IAAOC,SAGjB,OACE,oCACE,kBAACf,EAAD,CAAQP,MAAOe,GACb,kBAACN,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUT,MAAOiB,GACjB,kBAACnC,EAAA,EAAD,CAAUC,GAAG,KAAb,UACA,kBAACD,EAAA,EAAD,CAAUC,GAAG,KAAb,YACA,kBAACD,EAAA,EAAD,CAAUC,GAAG,KAAb,aACA,kBAACD,EAAA,EAAD,CAAUC,GAAG,KAAb,+BAEA,kBAAC2B,EAAD,KACE,kBAAC,EAAD,CACEpB,YAAauB,EACbxB,aAAc,kBAAMyB,GAAU,SAAAS,GAAK,OAAKA,WAKhD,kBAAC,EAAD,CACEjC,YAAauB,EACbxB,aAAc,kBAAMyB,GAAU,SAAAS,GAAK,OAAKA,U,mgBChGhD,IA4BeC,EA5BMC,YAAH,KCYHC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3b87087.chunk.js","sourcesContent":["import React from 'react'\nimport { Tabbable } from \"reakit/Tabbable\";\nimport styled from \"styled-components\";\n\nconst Image = styled.img`\n  height: 85%;\n  margin: auto 0;\n`;\n\nconst Brand = () => {\n  return (\n    <Tabbable as={Image} src=\"logo.png\" alt=\"Watt Health\" />\n  )\n}\n\nexport default Brand","import React from 'react';\nimport { Tabbable } from \"reakit/Tabbable\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin-top: .7rem;\n  cursor: pointer;\n  display: block;\n  outline: none;\n\n  &[tabindex]:focus {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n\n  &:focus:after {\n    content: '';\n    display: block;\n    position: absolute;\n    top: -0.7rem;\n    right: -0.7rem;\n    left: -0.7rem;\n    bottom: -0.7rem;\n    border: 1px solid #ffec00;\n    box-shadow: 0px 0px 5px  #ffec00;\n    border-radius: 10px;\n    pointer-events: none;\n  }\n\n  & span {\n    background: #ffec00;\n    display: block;\n    position: relative;\n    width: 3.5rem;\n    height: .4rem;\n    margin-bottom: .7rem;\n    transition: all ease-in-out 0.2s;\n  }\n\n  .open span:nth-child(2) {\n      opacity: 0;\n    }\n\n  .open span:nth-child(3) {\n    transform: rotate(45deg);\n    top: -11px;\n  }\n\n  .open span:nth-child(1) {\n    transform: rotate(-45deg);\n    top: 11px;\n  }\n\n`;\n\nconst BurgerMenu = ({ handleNavbar, navbarState }) => {\n  return (\n    <Tabbable as={Wrapper} onClick={handleNavbar}>\n      <div className={navbarState ? \"open\" : \"\"}>\n        <span>&nbsp;</span>\n        <span>&nbsp;</span>\n        <span>&nbsp;</span>\n      </div>\n    </Tabbable>\n  );\n};\n\nexport default BurgerMenu;","import React from 'react';\nimport { Tabbable } from \"reakit/Tabbable\";\nimport styled from 'styled-components';\n\nimport { useSpring, animated } from 'react-spring';\n\nconst CollapseWrapper = styled(animated.div)`\n  background: #bcbcbc;\n  position: fixed;\n  top: 6.5rem;\n  left: 0;\n  right: 0;\n`;\n\nconst NavLinks = styled.ul`\n  list-style-type: none;\n  padding: 2rem 1rem 2rem 2rem;\n\n  & li {\n    transition: all 300ms linear 0s;\n  }\n\n  & a {\n    font-size: 1.4rem;\n    line-height: 2;\n    color: #000000;\n    text-transform: uppercase;\n    text-decoration: none;\n    cursor: pointer;\n\n    &:hover {\n      color: #ffec00;\n      border-bottom: 1px solid #ffec00;\n    }\n  }\n`;\n\nconst CollapseMenu = ({ navbarState }) => {\n  const { open } = useSpring({ open: navbarState ? 0 : 1 });\n\n  if (navbarState === true) {\n    return (\n      <CollapseWrapper style={{\n        transform: open.interpolate({\n          range: [0, 0.2, 0.3, 1],\n          output: [0, -20, 0, -200],\n        }).interpolate(openValue => `translate3d(0, ${openValue}px, 0`),\n      }}\n      >\n        <NavLinks>\n          <Tabbable as=\"li\"><a href=\"/\">Sport,</a></Tabbable>\n          <Tabbable as=\"li\"><a href=\"/\">Musique,</a></Tabbable>\n          <Tabbable as=\"li\"><a href=\"/\">Santé,</a></Tabbable>\n          <Tabbable as=\"li\"><a href=\"/\">… quoi d’autre ?</a></Tabbable>\n        </NavLinks>\n      </CollapseWrapper>\n    );\n  }\n  return null;\n};\n\nexport default CollapseMenu;","import React, {useState} from 'react'\nimport { Tabbable } from \"reakit/Tabbable\";\nimport styled from \"styled-components\";\nimport { useSpring, animated, config } from \"react-spring\";\n\nimport Brand from \"./Brand\";\nimport BurgerMenu from \"./BurgerMenu\";\nimport CollapseMenu from \"./CollapseMenu\";\n\n\nconst NavBar = styled(animated.nav)`\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background: #bcbcbc;\n  z-index: 1;\n  font-size: 1.4rem;\n`;\n\nconst FlexContainer = styled.div`\n  max-width: 120rem;\n  display: flex;\n  margin: auto;\n  padding: 0 2rem;\n  justify-content: space-between;\n  height: 7rem;\n`;\n\nconst NavLinks = styled(animated.ul)`\n  justify-self: end;\n  list-style-type: none;\n  margin: auto 0;\n\n  & a {\n    color: #000000;\n    text-transform: uppercase;\n    font-weight: 600;\n    border-bottom: 1px solid transparent;\n    margin: 0 1.5rem;\n    transition: all 300ms linear 0s;\n    text-decoration: none;\n    cursor: pointer;\n\n    &:hover {\n      color: #ffec00;\n      border-bottom: 1px solid #ffec00;\n    }\n\n    @media (max-width: 768px) {\n      display: none;\n    }\n  }\n`;\n\nconst BurgerWrapper = styled.div`\n  margin: auto 0;\n\n  @media (min-width: 769px) {\n    display: none;\n  }\n`;\n\nconst Navbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const barAnimation = useSpring({\n    from: { transform: 'translate3d(0, -10rem, 0)' },\n    transform: 'translate3d(0, 0, 0)',\n  });\n\n  const linkAnimation = useSpring({\n    from: { transform: 'translate3d(0, 30px, 0)', opacity: 0 },\n    to: { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n    delay: 800,\n    config: config.wobbly,\n  });\n\n  return (\n    <>\n      <NavBar style={barAnimation}>\n        <FlexContainer>\n          <Brand />\n          <NavLinks style={linkAnimation}>\n          <Tabbable as=\"a\">Sport,</Tabbable>\n          <Tabbable as=\"a\">Musique,</Tabbable>\n          <Tabbable as=\"a\">Santé,</Tabbable>\n          <Tabbable as=\"a\">… quoi d’autre ?</Tabbable>\n          </NavLinks>\n          <BurgerWrapper>\n            <BurgerMenu\n              navbarState={isOpen}\n              handleNavbar={() => setIsOpen(state => !state)}\n            />\n          </BurgerWrapper>\n        </FlexContainer>\n      </NavBar>\n      <CollapseMenu\n        navbarState={isOpen}\n        handleNavbar={() => setIsOpen(state => !state)}\n      />\n    </>\n  )\n}\n\nexport default Navbar","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n\n  @import url('https://fonts.googleapis.com/css?family=Montserrat:400,600&display=swap');\n\n  *,\n  *::after,\n  *::before {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: inherit;\n  }\n\n  [tabindex]:focus {\n    outline: 0;\n    border: 1px solid #ffec00;\n    box-shadow: 0px 0px 5px  #ffec00;\n  }\n\n  html {\n    font-size: 62.5%;\n  }\n\n  body {\n    box-sizing: border-box;\n    font-family: 'Montserrat', sans-serif;\n  }\n`;\n\nexport default GlobalStyles;","import React from 'react';\nimport NavBar from './components/NavBar';\n\nimport GlobalStyle from './styles/Global';\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}